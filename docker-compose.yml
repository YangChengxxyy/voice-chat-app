version: "3.8"

services:
  # Socket.io 服务器
  socket-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: socketio
    container_name: voicechat-socket
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - CORS_ORIGIN=http://localhost:3000,http://127.0.0.1:3000,http://host.docker.internal:3000,http://0.0.0.0:3000,http://47.96.113.32:3000
      - ROOM_CLEANUP_INTERVAL=1800000
    volumes:
      - ./logs:/app/logs
    networks:
      - voicechat-network
    # healthcheck:
    #   test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # Next.js 前端应用
  web-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: nextjs
    container_name: voicechat-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_PUBLIC_SERVER_URL=http://localhost:3001
      - NEXT_PUBLIC_STUN_SERVERS=stun:stun.l.google.com:19302
      - NEXT_PUBLIC_MAX_USERS_PER_ROOM=4
      - NEXT_PUBLIC_DEBUG=false
    depends_on:
      - socket-server
    networks:
      - voicechat-network
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health", "||", "exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: voicechat-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - web-app
      - socket-server
    networks:
      - voicechat-network
    profiles:
      - with-nginx

  # Redis 缓存（可选，用于多实例部署）
  redis:
    image: redis:7-alpine
    container_name: voicechat-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - voicechat-network
    profiles:
      - with-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 - Prometheus（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: voicechat-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - voicechat-network
    profiles:
      - monitoring

  # 监控服务 - Grafana（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: voicechat-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - voicechat-network
    profiles:
      - monitoring

networks:
  voicechat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# 开发环境配置
x-development: &development
  environment:
    - NODE_ENV=development
    - NEXT_PUBLIC_DEBUG=true
  volumes:
    - .:/app
    - /app/node_modules
    - /app/.next

# 生产环境配置
x-production: &production
  restart: unless-stopped
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"
